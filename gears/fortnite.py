import discord
from discord.ext import commands
from discord.commands import SlashCommandGroup
from options import fortniteapi, myclient, servers_data
import json
import requests

class Fortnite(commands.Cog):
    def __init__(self, bot, servers_data):
        self.bot = bot
        self.servers_data = servers_data

    fortnite = SlashCommandGroup("fortnite", "–ö–æ–º–∞–Ω–¥—ã –ø–æ Fortnite")

    # Helper function to make a request to the Fortnite API
    def fortnite_api_request(self, username):
        request_url = f"https://fortnite-api.com/v2/stats/br/v2?name={username}"
        response = requests.get(request_url, params={"displayName": username}, headers={"Authorization": fortniteapi})
        response_data = response.json()
        return response_data.get("data"), response_data.get("status")

    # Helper function to get the Fortnite username for the user
    def get_fortnite_username(self, ctx, username):
        if not username:
            author_id = str(ctx.author.id)
            user_data = myclient[f"{str(ctx.guild.id)}"]["Users"].find_one({"_id": author_id})
            if user_data:
                username = user_data.get("fortnite")

        return username

    # Command to view Fortnite stats for a player
    @fortnite.command(description='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–æ–∫—É')
    async def stats(self, ctx: discord.ApplicationContext, username = None):
        Collection = myclient[f"{str(ctx.guild.id)}"]["Users"]
        server_data = self.servers_data.get(str(ctx.guild.id))
        if not server_data:
            return
        
        await ctx.defer()
        
        # Get the Fortnite username for the player
        username = self.get_fortnite_username(ctx, username)
        # Check if the Fortnite username is available
        if not username:
            await ctx.respond("–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å Fortnite –∫ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ Discord. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É `/fortnite connect <username>`!")
            return
        
        # Make a request to the Fortnite API for the stats data
        stats_data, status = self.fortnite_api_request(username)
        
        # Handle different status codes
        if status == 403:
            guide_files = [discord.File(f'resources/fortnite/fortnitestatsguide{i}.png') for i in range(1, 4)]
            await ctx.respond(f"‚ùó –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ **{username}** —Å–∫—Ä—ã—Ç—ã (–æ—à–∏–±–∫–∞ **{status}**).\n–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–≥—Ä—ã.", files=guide_files)
            return
        elif status == 404:
            await ctx.respond(f"‚ùó –ò–≥—Ä–æ–∫ **{username}** –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ—à–∏–±–∫–∞ **{status}**).")
            return
        elif status != 200:
            await ctx.respond(f"‚ùì –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ **{status}**...")
            return
        try:
            # Create and send the stats embed
            embed = discord.Embed(title=f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {stats_data["account"]["name"]}', color=int(server_data.get("accent_color"), 16))
            embed.add_field(name="üéüÔ∏è –£—Ä–æ–≤–µ–Ω—å –±–æ–µ–≤–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞", value=f'{stats_data["battlePass"]["level"]}')
            embed.add_field(name="üéÆ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ", value=f'{stats_data["stats"]["all"]["overall"]["matches"]}')
            embed.add_field(name="üëë –í—Å–µ–≥–æ –ø–æ–±–µ–¥", value=f'{stats_data["stats"]["all"]["overall"]["wins"]}')
            embed.add_field(name="üéñ –í—Å–µ–≥–æ —Ç–æ–ø-3", value=f'{stats_data["stats"]["all"]["overall"]["top3"]}')
            embed.add_field(name="üéñ –í—Å–µ–≥–æ —Ç–æ–ø-5", value=f'{stats_data["stats"]["all"]["overall"]["top5"]}')
            embed.add_field(name="üéñ –í—Å–µ–≥–æ —Ç–æ–ø-10", value=f'{stats_data["stats"]["all"]["overall"]["top10"]}')
            embed.add_field(name="üéñ –í—Å–µ–≥–æ —Ç–æ–ø-25", value=f'{stats_data["stats"]["all"]["overall"]["top25"]}')
            embed.add_field(name="üíÄ –í—Å–µ–≥–æ —É–±–∏–π—Å—Ç–≤", value=f'{stats_data["stats"]["all"]["overall"]["kills"]}')
            embed.add_field(name="‚ò†Ô∏è –£–±–∏–π—Å—Ç–≤ –≤ –º–∏–Ω—É—Ç—É", value=f'{stats_data["stats"]["all"]["overall"]["killsPerMin"]}')
            embed.add_field(name="‚ò†Ô∏è –£–±–∏–π—Å—Ç–≤ –∑–∞ –º–∞—Ç—á", value=f'{stats_data["stats"]["all"]["overall"]["killsPerMatch"]}')
            embed.add_field(name="‚ö∞Ô∏è –í—Å–µ–≥–æ —Å–º–µ—Ä—Ç–µ–π", value=f'{stats_data["stats"]["all"]["overall"]["deaths"]}')
            embed.add_field(name="üìà –û–±—â–µ–µ K/D", value=f'{stats_data["stats"]["all"]["overall"]["kd"]}')
            embed.add_field(name="üìâ % –ø–æ–±–µ–¥", value=f'{stats_data["stats"]["all"]["overall"]["winRate"]}')
            embed.add_field(name="üïì –í—Å–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–æ –º–∏–Ω—É—Ç", value=f'{stats_data["stats"]["all"]["overall"]["minutesPlayed"]}')
            embed.add_field(name="üôã‚Äç‚ôÇÔ∏è –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –ø–µ—Ä–µ–∂–∏—Ç–æ", value=f'{stats_data["stats"]["all"]["overall"]["playersOutlived"]}')
            
            # Add the owner of the profile if available in the database
            try:
                embed.add_field(name = "–í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ—Ñ–∏–ª—è", value=f"<@{Collection.find_one({'fortnite': username})['_id']}>")
            except TypeError:
                pass
            await ctx.respond(embed = embed)
        except KeyError:
            await ctx.respond("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        
    # Command to view the Fortnite map
    @fortnite.command(description='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É')
    async def map(self, ctx: discord.ApplicationContext):
        server_data = self.servers_data.get(str(ctx.guild.id))
        if not server_data:
            return

        request_url = "https://fortnite-api.com/v1/map"
        response = requests.get(request_url, headers={"Authorization": fortniteapi})
        map_data = response.json().get("data", {}).get("images", {}).get("pois", None)

        if not map_data:
            await ctx.respond("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã.")
            return

        embed = discord.Embed(title='–ö–∞—Ä—Ç–∞ Fortnite', color=int(server_data.get("accent_color"), 16))
        embed.set_image(url=map_data)
        await ctx.respond(embed=embed)  
        
    @fortnite.command(description='–ü—Ä–∏–≤—è–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å Fortnite –∫ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ Discord')
    async def connect(self, ctx: discord.ApplicationContext, username):
        server_data = self.servers_data.get(str(ctx.guild.id))
        if not server_data:
            return

        Collection = myclient[f"{str(ctx.guild.id)}"]["Users"]
        await ctx.defer()
        author_id = str(ctx.author.id)

        stats_data, status = self.fortnite_api_request(username)
        if status != 200 or not stats_data:
            await ctx.respond(f"–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ **{status}**.\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –Ω–∏–∫–Ω–µ–π–º.")
            return

        Collection.update_one({"_id": author_id}, {"$set": {"fortnite": username}})
        embed = discord.Embed(description=f"–ê–∫–∫–∞—É–Ω—Ç {username} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–π —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏!\n–ï—Å–ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –≤ –∏–≥—Ä–µ, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞—Ç—å –∑–¥–µ—Å—å.", color=int(server_data.get("accent_color"), 16))
        await ctx.respond(embed=embed)
    
def setup(bot):
    bot.add_cog(Fortnite(bot, servers_data))