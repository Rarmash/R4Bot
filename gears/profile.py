import datetime
import platform
import sys
import time
from math import ceil

import discord
from discord.ext import commands

from modules.firebase import get_from_record
from options import version, servers_data, applicationID


class BotLink(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        # Create an invitation button with a link to invite the bot to a guild
        invite_button = discord.ui.Button(label="–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", style=discord.ButtonStyle.link, emoji="ü§©",
                                          url=f"https://discord.com/oauth2/authorize?client_id={applicationID}&permissions=8&scope=bot%20applications.commands")
        self.add_item(invite_button)


class Profile(commands.Cog):
    def __init__(self, bot, servers_data):
        self.Bot = bot
        self.servers_data = servers_data

    # Define the profile slash command
    @commands.slash_command(description='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏–ª—è')
    async def profile(self, ctx: discord.ApplicationContext, user: discord.Member = None):
        server_data = self.servers_data.get(str(ctx.guild.id))
        if not server_data:
            return
        date_format = "%#d.%#m.%Y –≤ %H:%M:%S"
        if user is None:
            user = ctx.author

        # Get the status emoji based on the user's status
        status = self.get_status_emoji(user.status)

        # Fetch user data from the database
        user_data = get_from_record(str(ctx.guild.id), "Users", str(user.id))

        # If the user is not the bot itself, display the user's profile information
        if user.id != self.Bot.user.id:
            time_out = '(–≤ —Ç–∞–π–º-–∞—É—Ç–µ)' if user.timed_out else ''
            embed = discord.Embed(title=f'–ü—Ä–∏–≤–µ—Ç, —è {user.name}', description=f"<@{user.id}> ‚Äî {status} {time_out}",
                                  color=int(server_data.get("accent_color"), 16))
            embed.add_field(name="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                            value=f"<t:{ceil(time.mktime((datetime.datetime.strptime(str(user.created_at.strftime(date_format)), '%d.%m.%Y –≤ %H:%M:%S') + datetime.timedelta(hours=3)).timetuple()))}:f>")
            embed.add_field(name="–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å",
                            value=f"<t:{ceil(time.mktime((datetime.datetime.strptime(str(user.joined_at.strftime(date_format)), '%d.%m.%Y –≤ %H:%M:%S') + datetime.timedelta(hours=3)).timetuple()))}:f>")
            if not user.bot:
                embed.add_field(name="–°–æ–æ–±—â–µ–Ω–∏–π", value=user_data['messages'])
                embed.add_field(name="–í—Å–µ–≥–æ —Ç–∞–π–º-–∞—É—Ç–æ–≤", value=user_data['timeouts'])
                if "xbox" in user_data:
                    embed.add_field(name="–ü—Ä–æ—Ñ–∏–ª—å Xbox",
                                    value=f"[{user_data['xbox']}](https://account.xbox.com/ru-ru/Profile?Gamertag={str(user_data['xbox']).replace(' ', '%20')})")
                if "fortnite" in user_data:
                    embed.add_field(name="–ü—Ä–æ—Ñ–∏–ª—å Fortnite", value=user_data['fortnite'])
            if discord.utils.get(ctx.guild.roles, id=server_data.get("insider_id")) in user.roles:
                embed.set_footer(text="–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø–æ–º–æ–≥–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä—É —Å—Ç–∞—Ç—å –ª—É—á—à–µ")
            embed.set_thumbnail(url=user.avatar)
            await ctx.respond(embed=embed)
        # If the user is the bot itself, display the bot's profile information
        if user.id == self.Bot.user.id:
            embed = discord.Embed(title=f'–ü—Ä–∏–≤–µ—Ç, —è {user.name}', description=f"–¢–µ–≥: <@{user.id}>",
                                  color=int(server_data.get("accent_color"), 16))
            embed.add_field(name="–í–ª–∞–¥–µ–ª–µ—Ü", value=f"<@{server_data.get('admin_id')}>")
            embed.add_field(name="–°–µ—Ä–≤–µ—Ä –±–æ—Ç–∞", value="RU Xbox Shit Force")
            embed.add_field(name="–°–æ–∑–¥–∞–Ω",
                            value=f"<t:{ceil(time.mktime((datetime.datetime.strptime(str(user.created_at.strftime(date_format)), '%d.%m.%Y –≤ %H:%M:%S') + datetime.timedelta(hours=3)).timetuple()))}:f>")
            embed.add_field(name="–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å",
                            value=f"<t:{ceil(time.mktime((datetime.datetime.strptime(str(user.joined_at.strftime(date_format)), '%d.%m.%Y –≤ %H:%M:%S') + datetime.timedelta(hours=3)).timetuple()))}:f>")
            embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=status)
            embed.add_field(name="–û–°", value=sys.platform)
            embed.add_field(name="–í–µ—Ä—Å–∏—è –±–æ—Ç–∞", value=version)
            embed.add_field(name="–í–µ—Ä—Å–∏—è Python", value=platform.python_version())
            embed.add_field(name="–í–µ—Ä—Å–∏—è Pycord", value=discord.__version__)
            embed.set_thumbnail(url=user.avatar)
            await ctx.respond(embed=embed, view=BotLink())

    # Function to get the status emoji based on the user's status
    def get_status_emoji(self, status):
        if status == discord.Status.online:
            return "üü¢ –≤ —Å–µ—Ç–∏"
        elif status == discord.Status.offline:
            return "‚ö™ –Ω–µ –≤ —Å–µ—Ç–∏"
        elif status == discord.Status.idle:
            return "üåô –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        elif status == discord.Status.dnd:
            return "‚õî –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å"


def setup(bot):
    bot.add_cog(Profile(bot, servers_data))
